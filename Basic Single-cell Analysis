```markdown
title: "Seurat Tutorial"
author: "Wanessa Santos"
date: "2024-03-25"
---
Single-cell Analysis

Before starting the analysis, ensure that R Studio is installed on your system. To install Seurat, use the following commands in R (or R Studio):

```{r}
# Install Seurat from CRAN
install.packages('Seurat')

# Load the Seurat library
library(Seurat)

# Install additional recommended packages
install.packages("remotes")

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))

setRepositories(ind = 1:3, addURLs = c('https://satijalab.r-universe.dev', 'https://bnprks.r-universe.dev/'))
install.packages(c("BPCells", "presto", "glmGamPoi"))

# Install additional packages used in tutorials that enhance Seurat's functionality
install.packages(c("httr", "usethis"))
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("devtools")
install.packages(c('Signac', 'SeuratData'))
update.packages(oldPkgs = c("withr", "rlang"))

if (!requireNamespace('remotes', quietly = TRUE)) {
  install.packages('remotes')}
remotes::install_github('satijalab/azimuth', ref = 'master', quiet = TRUE)
remotes::install_github("satijalab/seurat-data", quiet = TRUE)
remotes::install_github("satijalab/seurat-wrappers", quiet = TRUE)
devtools::install_github("thomasp85/patchwork")

# Resolve errors related to the Matrix package
BiocManager::install("TFBSTools", type = "source", force = TRUE)

# Load additional libraries
library(patchwork)
library(dplyr)
library(ggplot2)
library(SeuratData)
```

After successfully installing Seurat and the additional packages, we can start exploring the PBMC dataset from 10X Genomics. First, we need to load the data into the R environment. This can be done using Seurat's Read10X function, which reads the output files from Cell Ranger (10X Genomics software) and returns a list of sparse matrices, where each matrix corresponds to a feature (in our case, RNA transcripts).

```{r}
# Loading the data
pbmc_cells.data <- Read10X(data.dir = "/Users/Downloads/filtered_gene_bc_matrices/hg19/")
```

Next, we create a Seurat object:

```{r}
# Creating a Seurat object
pbmc_cells <- CreateSeuratObject(counts = pbmc_cells.data, project = "pbmc3k", min.cells = 3, min.features = 200)

saveRDS(pbmc_cells, "Object.rds")
pbmc_cells = readRDS("Users/wanessa/Library/CloudStorage/OneDrive-UniãoSocialCamiliana/Bioinformática/Projeto Depressão/Object.rds")
```

The Seurat object serves as a container that holds all the necessary information for the analysis, including raw data, metadata, and analysis results. It facilitates the organization and execution of various steps in single-cell analysis efficiently.

After creating the object, the next step is Quality Control (QC). QC is a fundamental step that involves assessing the quality of the cells and removing potential outliers that could affect the integrity of the analysis. An outlier is an unusual value that deviates from the expected pattern, potentially distorting the results of analyses and algorithms. At this stage, it is common to evaluate metrics such as the number of unique genes detected in each cell, the total count of molecules detected, and the percentage of reads mapping to the mitochondrial genome. It is important to note that Seurat provides flexibility to explore QC metrics and filter cells based on user-defined criteria.

In our case, we opted for an approach recommended by best practices in single-cell analysis. We use a custom function called `mad_outlier`, based on the Median Absolute Deviation (MAD), to identify and remove outliers from the raw data. This approach offers a robust way to handle outliers, ensuring data reliability before proceeding to subsequent analysis steps.

```{r}
# Function to detect outliers using MAD
mad_outlier <- function(vector, nmads = 5) {
  median_value <- median(vector, na.rm = TRUE)
  mad_value <- mad(vector, na.rm = TRUE)
  upper_threshold <- median_value + nmads * mad_value
  lower_threshold <- median_value - nmads * mad_value
  outliers <- (vector < lower_threshold) | (vector > upper_threshold)
  return(outliers)
}
# Apply the mad_outlier function and filter the data from the object
pbmc_cells[["percent.mt"]] <- PercentageFeatureSet(pbmc_cells, pattern = "^MT-")
pbmc_cells <- subset(pbmc_cells, subset = percent.mt < 10)
pbmc_cells$log1p_total_counts = log1p(pbmc_cells@meta.data$nCount_RNA)
pbmc_cells$log1p_n_genes_by_counts = log1p(pbmc_cells@meta.data$nFeature_RNA)
bool_vector <- !mad_outlier(pbmc_cells$log1p_total_counts, 5) & 
  !mad_outlier(pbmc_cells$log1p_n_genes_by_counts, 5)
pbmc_cells <- subset(pbmc_cells, cells = which(bool_vector))
```

# Visualizing Quality Control (QC) metrics with the violin plot

```{r}
VlnPlot(pbmc_cells, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```
Mitochondrial filtering is an important step since mitochondria are cellular organelles with their own genome. Excessive presence of mitochondrial transcripts can indicate stressed or damaged cells, as these cells often show increased mitochondrial activity. Therefore, filtering cells with high levels of mitochondrial gene expression helps remove these potentially problematic cells from the dataset, improving overall data quality and the accuracy of subsequent analyses.

Now that we have performed cell quality analysis and removed potential outliers, we can proceed with data normalization. The standard normalization method used by Seurat is "LogNormalize," which normalizes gene expression measurements for each cell by the total expression, multiplies this value by a scaling factor (10,000 by default), and applies a logarithmic transformation to the result.

```{r}
pbmc_cells <- NormalizeData(object = pbmc_cells, normalization.method = "LogNormalize", scale.factor = 10000)
```

The `FindVariableGenes` function is then used to identify highly variable genes, considering the mean expression and dispersion of each gene. This step is crucial for focusing on the genes that truly contribute to the dataset's variability.

```{r}
pbmc_cells <- FindVariableFeatures(pbmc_cells, selection.method = "vst", nfeatures = 2000)
```

Next, the `ScaleData` function is used to apply a linear transformation to the data as a preprocessing step before dimensionality reduction techniques like principal component analysis (PCA). It adjusts each gene's expression so that the mean is 0 and the variance is 1 among the cells, ensuring that highly expressed genes do not dominate subsequent analyses.

```{r}
all.genes <- rownames(pbmc_cells)
pbmc_cells <- ScaleData(pbmc_cells, features = all.genes)
```

PCA analysis is performed after the data is normalized and scaled. It transforms a set of genes that may be correlated into a smaller set of uncorrelated principal components. In summary, each cell is treated as an individual, and each gene as a variable. PCA identifies the axes along which data variation is maximal; these axes are the principal components. Seurat provides various ways to visualize PCA results, including `PrintPCA` and `PCHeatmap`.

```{r}
pbmc_cells <- RunPCA(pbmc_cells, features = VariableFeatures(object = pbmc_cells))
```

To determine which PCs (principal components) to include in subsequent analyses, Seurat offers the `JackStraw` approach, a permutation test that compares the distribution of p-values for each PC to a uniform distribution. The `JackStraw` visualization helps identify significant PCs (Figure 7).

```{r}
pbmc_cells <- JackStraw(pbmc_cells, num.replicate = 100)
pbmc_cells <- ScoreJackStraw(pbmc_cells, dims = 1:20)
JackStrawPlot(pbmc_cells, dims = 1:20)
```

Another approach is to look at the elbow plot of principal component variances. This method is often used due to its efficiency and the ease with which results can be visualized.

```{r}
ElbowPlot(object = pbmc_cells)
```

The choice of PCs can then be determined based on the values established in these statistical methods. In this example, we chose 12 PCs based on the elbow plot, considering the interpretability of the signals in the selected PCs.

After selecting the PCs, the next step is to identify groups of cells with similar transcriptomic characteristics. Using Seurat's `FindNeighbors` function, we can construct a graph representing the proximity relationships between cells in PC space. These cells are then called neighboring cells, hence the function name `FindNeighbors`.

```{r}
pbmc_cells <- FindNeighbors(object = pbmc_cells, dims = 1:12)
```

After identifying neighbors, we can proceed to the clustering step, where we group similar cells
